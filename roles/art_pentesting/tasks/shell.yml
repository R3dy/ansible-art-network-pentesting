---
# shell customization
- block: 
    - name: Pip install powerline-status
      become_user: "{{ actual_user }}"
      pip:
        executable: pip3
        name: powerline-status
        extra_args: --user

    - name: Apt install powerline fonts
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
        cache_valid_time: 3600
      loop:
        - fonts-powerline

    - name: Add powerline to .bashrc
      become_user: "{{ actual_user }}"
      blockinfile:
        dest: "{{ actual_user_home.stdout }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED BLOCK: powerline"
        block: |
          [[ -e $HOME/.local/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh ]] && {
            source $HOME/.local/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh
          }

    - name: Create $HOME/.vimrc if does not exist
      copy:
        content: ""
        dest: "{{ actual_user_home.stdout }}/.vimrc"
        force: yes
        owner: "{{ actual_user }}"
        mode: '0755'

    - name: Add powerline to vim
      become_user: "{{ actual_user }}"
      blockinfile:
        dest: "{{ actual_user_home.stdout }}/.vimrc"
        marker: '" {mark} ANSIBLE MANAGED BLOCK: powerline'
        block: |
          "" PowerLine
          set rtp+={{ actual_user_home.stdout }}/.local/lib/python3.6/site-packages/powerline/bindings/vim
          set laststatus=2
          set t_Co=256

    - name: Create $HOME/.tmux.conf if does not exist
      file:
        path: "{{ actual_user_home.stdout }}/.tmux.conf"
        state: touch

    - name: Add powerline to tmux.conf file
      become_user: "{{ actual_user }}"
      blockinfile:
        dest: "{{ actual_user_home.stdout }}/.tmux.conf"
        marker: '# {mark} ANSIBLE MANAGED BLOCK: powerline'
        block: |
          set -g default-terminal "screen-256color"
          run-shell 'powerline-config tmux setup'

  when: art_pentesting_shell is defined and art_pentesting_shell 
