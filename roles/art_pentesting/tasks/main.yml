---
- name: Apt install nice to haves
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
    cache_valid_time: 3600
  loop:
    - vim
    - tmux
    - curl

- name: Apt install network tools
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
    cache_valid_time: 3600
  loop:
    # open ssh
    - openssh-server
    - openssh-client

    # fast, parallel, modular, login brute-forcer for network services
    - medusa 

    # NET-3 networking toolkit
    - net-tools 

    # various deps? 
    - libssl-dev
    - libffi-dev
    - build-essential

- debug:
    msg: "{{ ansible_user }}"

# this is necessary because ansible_user becomes unset in become_user clauses
- set_fact:
    actual_user: "{{ ansible_user }}" 

#- debug:
#    msg: "{{ ansible_facts }}"

- name:
  shell: >
    getent passwd {{ actual_user }} | cut -d: -f6
  changed_when: false
  register: actual_user_home

- name: Ensure pip --user enabled in .bashrc
  become_user: "{{ actual_user }}"
  blockinfile:
    dest: "{{ actual_user_home.stdout }}/.bashrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: pip"
    block: |
      [[ -d $HOME/.local/bin ]] && {
        PATH="$HOME/.local/bin:$PATH"
      }

- name: Pip install CrackMapExec
  become_user: "{{ actual_user }}"
  pip:
    name: crackmapexec
    extra_args: --user


# shell customization
- block: 
    - name: Pip install powerline-status
      become_user: "{{ actual_user }}"
      pip:
        name: powerline-status
        extra_args: --user

    - name: Apt install powerline fonts
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
        cache_valid_time: 3600
      loop:
        - fonts-powerline

    - name: Add powerline to .bashrc
      become_user: "{{ actual_user }}"
      blockinfile:
        dest: "{{ actual_user_home.stdout }}/.bashrc"
        marker: "# {mark} ANSIBLE MANAGED BLOCK: powerline"
        block: |
          [[ -e $HOME/.local/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh ]] && {
            source $HOME/.local/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh
          }

    - name: Create $HOME/.vimrc if does not exist
      copy:
        content: ""
        dest: "{{ actual_user_home.stdout }}/.vimrc"
        force: no
        owner: "{{ actual_user }}"
        mode: '0755'

    - name: Add powerline to vim
      become_user: "{{ actual_user }}"
      blockinfile:
        dest: "{{ actual_user_home.stdout }}/.vimrc"
        marker: '" {mark} ANSIBLE MANAGED BLOCK: powerline'
        block: |
          "" PowerLine
          set rtp+={{ actual_user_home.stdout }}/.local/lib/python3.6/site-packages/powerline/bindings/vim
          set laststatus=2
          set t_Co=256

    - name: Create $HOME/.tmux.conf if does not exist
      copy:
        content: ""
        dest: "{{ actual_user_home.stdout }}/.tmux.conf"
        force: no
        owner: "{{ actual_user }}"
        mode: '0755'

    - name: Add powerline to tmux.conf file
      become_user: "{{ actual_user }}"
      blockinfile:
        dest: "{{ actual_user_home.stdout }}/.tmux.conf"
        marker: '# {mark} ANSIBLE MANAGED BLOCK: powerline'
        block: |
          set -g default-terminal "screen-256color"
          run-shell 'powerline-config tmux setup'
  when: art_pentesting_shell is defined and art_pentesting_shell 
